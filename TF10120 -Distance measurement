#include <Wire.h>

const int TOF10120_ADDRESS = 0x52; // I2C address of TOF10120
const int NUM_READINGS = 10; // Number of readings to average
const float ALPHA = 0.1; // Smoothing factor for EMA

uint16_t lastDistance = 0;

void setup() {
  Serial.begin(115200);
  Wire.begin(4, 5); // SDA, SCL pins for ESP8266
  Serial.println("TOF10120 sensor test with median filtering and averaging");
}

void loop() {
  uint16_t distance = getStableDistance();
  Serial.print("Stable Distance: ");
  Serial.print(distance);
  Serial.println(" mm");
  delay(2000); // Delay for 2 seconds
}

uint16_t readTOF10120() {
  Wire.beginTransmission(TOF10120_ADDRESS);
  Wire.write(0x00); // Register to read from
  Wire.endTransmission();
  Wire.requesrom(TOF10120_ADDRESS, 2);
  if (Wire.available() == 2) {
    uint16_t distance = Wire.read();
    distance = distance << 8;
    distance |= Wire.read();
    return distance;
  }
  return 0; // Return 0 if no valid data
}

uint16_t getStableDistance() {
  uint16_t readings[NUM_READINGS];
  for (int i = 0; i < NUM_READINGS; i++) {
    uint16_t distance = readTOF10120();
    if (distance > 0) {
      readings[i] = distance;
    } else {
      readings[i] = lastDistance; // Use last valid reading if current is invalid
    }
    delay(10); // Small delay between readings
  }
  uint16_t medianDistance = medianFilter(readings, NUM_READINGS);
  return exponentialMovingAverage(medianDistance);
}

uint16_t medianFilter(uint16_t *values, int size) {
  // Sort the array
  for (int i = 0; i < size - 1; i++) {
    for (int j = i + 1; j < size; j++) {
      if (values[i] > values[j]) {
        uint16_t temp = values[i];
        values[i] = values[j];
        values[j] = temp;
      }
    }
  }
  // Return the median value
  if (size % 2 == 0) {
    return (values[size / 2 - 1] + values[size / 2]) / 2;
  } else {
    return values[size / 2];
  }
}

uint16_t exponentialMovingAverage(uint16_t newDistance) {
  lastDistance = ALPHA * newDistance + (1 - ALPHA) * lastDistance;
  return lastDistance;
}
